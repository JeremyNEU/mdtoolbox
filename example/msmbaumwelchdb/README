This example illustrates the usage of the Hidden Markov modeling routine (msmbaumwelchdb.m) in MDToolbox.

The purpose of the Hidden Markov Modeling is to obtain the correct transition probabilities 'T_ref'
and populations 'p_ref' for discrete conformational states from given time-series data. 

Here, four conformational states are defined from the analysis of a coarse-grained FRET-dye labeled polyproline-20 model.
The point is that each state has different distribution for distance between two FRET dyes.
From the time-series data of the distance between two FRET dyes, we try to estimate 'T_ref' and 'p_ref'. 

% load test data set containint correct transition probabilities and populations, etc.

>> load data.mat;

% display correct values for transition probabilities 'T_ref', and populations 'p_ref' for four states
% T_ref(i, j) represents the transition probability from state i to state j
% p_ref(i) represents the population of state i

>> T_ref

T_ref =

    0.9546    0.0140    0.0144    0.0170
    0.5273    0.4569    0.0074    0.0084
    0.5117    0.0070    0.4747    0.0067
    0.3733    0.0049    0.0042    0.6177

>> p_ref

p_ref =

    0.9089    0.0241    0.0257    0.0414

% plot 'emission' probabilities for four states (empirical distribution of intra molecular distance in each state)
% here, 'center' contains the center distance for each bin

>> plot(center, emission)
>> xlabel('Distance (Angstrom)');
>> ylabel('Probability');

% generate distance time-series data by stochastic simulation according to T_ref
% Here, 'state' contains state index, and 'observation' contains distance time-series. 

>> [state, observation] = msmgenerate(10^4, T_ref, emission, p_ref);

% plot the distance time-series

>> plot(center(observation))
>> xlabel('Step')
>> ylabel('Distance (Angstrom)');

% display a prior Markov State Model with transition probabilities and populations
% they are to be refined throught the hidden Markov modeling

>> T_init

T_init =

    0.5939    0.1166    0.1132    0.1764
    0.5837    0.1410    0.1194    0.1559
    0.5772    0.1216    0.1564    0.1449
    0.5685    0.1003    0.0915    0.2396

>> p_init

p_init =

    0.5861    0.1171    0.1149    0.1819

% hidden Markov modling of 'T_init' and 'p_init'
% from distance time-series 'observation'
% Here 'T' and 'p' are the estimated transition probabilities and populations, respectively.
% 'logL' is the log of likelihood function to be optimized. 

>> [T, ~, p, logL] = msmbaumwelchdb(observation, T_init, emission, p_init, 10^(-3), 10^4);

% plot the log of likelihood funciton and see it was optimized

>> plot(logL)
>> xlabel('Iteration')
>> ylabel('Log likelihood')

% see esimates 'T' and 'p' which should be closer to 'T_ref' and 'p_ref' than 'T_init' and 'p_init'
% (note that result depends on each run because 'msmgenerate' uses a random generator)

>> T 

T =

    0.9362    0.0167    0.0120    0.0351
    0.6032    0.1579    0.0996    0.1393
    0.5281    0.1221    0.1808    0.1690
    0.6091    0.0671    0.0665    0.2573

>> p

p =

    0.9026    0.0250    0.0204    0.0520

